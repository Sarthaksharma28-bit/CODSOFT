# Advertising dataset analysis

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import warnings

warnings.simplefilter(action='ignore', category=FutureWarning)
os.getcwd()

# Load dataset
advertising_data = pd.read_csv("/content/advertising.csv")

# Rename the column 'Unnamed: 0' to 'Index' (if it exists)
if 'Unnamed: 0' in advertising_data.columns:
    advertising_data.rename(columns={'Unnamed: 0': 'Index'}, inplace=True)

# Scatter plots to check the linearity assumption between each independent variable (TV, Radio, Newspaper) and the dependent variable (Sales)
sns.pairplot(advertising_data, x_vars=["TV", "Radio", "Newspaper"], y_vars="Sales", kind="reg")

# Histograms to check the normality assumption of the dependent variable (Sales)
advertising_data.hist(bins=20)

# Linear regression plots to visualize the relationship between each independent variable and the dependent variable
sns.lmplot(x='TV', y='Sales', data=advertising_data)
sns.lmplot(x='Radio', y='Sales', data=advertising_data)
sns.lmplot(x='Newspaper', y='Sales', data=advertising_data)

# Correlation Heatmap to check for multicollinearity among independent/dependent variables
corrmat = advertising_data.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmin=0, vmax=1, square=True, cmap="YlGnBu", ax=ax)
plt.show()

# Model Preparation
predictor_variables = advertising_data.drop('Sales', axis=1)
response_variable = advertising_data['Sales']

training_predictors, testing_predictors, training_response, testing_response = train_test_split(predictor_variables, response_variable, test_size=0.20, random_state=46)

# Linear Regression Model using sklearn
linear_regression_model = LinearRegression()
linear_regression_model.fit(training_predictors, training_response)

# Print the coefficients of the linear model
print("Linear Regression Coefficients:", linear_regression_model.coef_)
print("Linear Regression Intercept:", linear_regression_model.intercept_)

# Evaluate the model
evaluation_results = []
model_names = []

# Define a list of models to evaluate
regression_models = [('LinearRegression', linear_regression_model)]

# Loop through each model, fit it to the data, and calculate the RMSE
for name, model in regression_models:
    predicted_response = model.predict(testing_predictors)
    result = np.sqrt(mean_squared_error(testing_response, predicted_response))
    evaluation_results.append(result)
    model_names.append(name)
    msg = "%s: %f" % (name, result)
    print(msg)

# Make predictions on new data using sklearn model
new_data = pd.DataFrame({'TV': [100], 'Radio': [50], 'Newspaper': [25]})
predicted_sales = linear_regression_model.predict(new_data)
print("Predicted Sales for TV=100, Radio=50, Newspaper=25:", predicted_sales)

# Make predictions on another new data
new_data = pd.DataFrame({'TV': [25], 'Radio': [63], 'Newspaper': [80]})
predicted_sales = linear_regression_model.predict(new_data)
print("Predicted Sales for TV=25, Radio=63, Newspaper=80:", predicted_sales)
